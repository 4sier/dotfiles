" TODO
" 1. Update status line to show git and linting/LSP information
" 2. Add linting capabilities. Options are:
"    - verilator (it must report width mismatch warnings)
"    - veridian and verible -> this is working in nvim

" Enable Plugin Manager pathogen
execute pathogen#infect()

" This will enable code folding.
" Use the marker method of folding.
"augroup filetype_vim
"    autocmd!
"    autocmd FileType vim setlocal foldmethod=marker
"augroup END

" Disable annoying beep sound
set vb

" This might be needed by catpuccin
" NOTE: This results on vim displaying different colors when running within a
" tmux session
set termguicolors

" Set color scheme. Other good ones are bubblegum-256-dark, sorcerer, and zenburn
"colorscheme bubblegum-256-dark
"colorscheme darktango
"colorscheme jellybeans
"colorscheme xoria256
"colorscheme zenburn
colorscheme  catppuccin_mocha

" Disable compatibility with vi which can cause unexpected issues.
set nocompatible

" Enable type file detection. Vim will be able to try to detect the type of file in use.
filetype on

" Enable plugins and load plugin for the detected file type.
filetype plugin on

" Load an indent file for the detected file type.
filetype indent on

" Enable syntax highlighting
syntax on

" Show line numbers
set number
set relativenumber

" Toogle relativenumber when entering/leaving INSERT mode
autocmd InsertEnter * :setlocal norelativenumber
autocmd InsertLeave * :setlocal relativenumber

" Highlight cursor line underneath the cursor horizontally.
set cursorline

""hi cursorline gui=none
augroup CursorlineOnlyInActiveWindow
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END

" Set shift and tab width to 4 spaces and use space characters instead of tabs.
set shiftwidth=4
set tabstop=4
set expandtab

" Do not save backup files.
set nobackup
set nowb
set noswapfile

" Do not let cursor scroll below or above N number of lines when scrolling.
set scrolloff=10

" Do not wrap lines. Allow long lines to extend as far as the line goes.
set nowrap

" While searching though a file incrementally highlight matching characters as you type.
set incsearch

" Ignore capital letters during search.
set ignorecase

" Override the ignorecase option if searching for capital letters.
" This will allow you to search specifically for capital letters.
set smartcase

" Show partial command you type in the last line of the screen.
set showcmd

" Do not show the mode you are on the last line. The mode will be shown in the
" status line
set noshowmode

" Show matching words during a search.
set showmatch

" Use highlighting when doing a search.
set hlsearch

" Set the commands to save in history default number is 20.
set history=1000

" Search down into subfolders. Provides tab completion for all file-related
" tasks
set path+=**

" Enable auto completion menu after pressing TAB.
set wildmenu

" Make wildmenu behave like similar to Bash completion.
set wildmode=list:longest

" There are certain files that we would never want to edit with Vim.
" Wildmenu will ignore files with these extensions.
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx

" this turns off physical line wrapping (ie: automatic insertion of newlines)
set textwidth=0 wrapmargin=0

" Be smart when using tabs
set smarttab

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Move cursor to right or below when splitting vertically or horizontally
set splitright
set splitbelow

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Navigate on code files
" - Use ^] to jump to tag under cursor
" - Use g^] for ambiguous tags
" - Use ^t to jump back up the tag stack
command! MakeTags !ctags -R .


" AUTOCOMPLETE:

" The good stuff is documented in |ins-completion|

" TODO: Find out how this works againa and what it is for!!
" HIGHLIGHTS:
" - ^x^n for JUST this file
" - ^x^f for filenames (works with our path trick!)
" - ^x^] for tags only
" - ^n for anything specified by the 'complete' option

" NOW WE CAN:
" - Use ^n and ^p to go back and forth in the suggestion list


" Tweaks for browsing
let g:netrw_banner=0        " disable annoying banner
let g:netrw_winsize=20      " 20%
"let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

" NOW WE CAN:
" - :edit a folder to open a file browser
" - h/v/t to open in an h-split/v-split/tab
" - check |netrw-browse-maps| for more mappings



" BUILD INTEGRATION:
"
" Steal Mr. Bradley's formatter & add it to our spec_helper
" http://philipbradley.net/posts/rspec-into-vim-with-quickfix
"
" Configure the `make` command to run RSpec
"set makeprg=bundle\ exec\ rspec\ -f\ QuickfixFormatter
"
" NOW WE CAN:
" - Run :make to run RSpec
" - :cl to list errors
" - :cc# to jump to error by number
" - :cn and :cp to navigate forward and back

" Identify locations for tags files generated with ctags program
set tags=./tags
set tags+=~/.vim/tags/UVM/tags

" TODO: What is this for??
"if getcwd() =~# '^\($your_working_dir/\)'
"  set secure exrc
"endif



" PLUGINS ----------------------------------------------------------------

"
" ALE
"

" NOTE: not used for now. Uncomment these lines if used
"let g:ale_echo_msg_error_str = 'E'
"let g:ale_echo_msg_warning_str = 'W'
"let g:ale_echo_msg_format = '[%linter%] [%severity%] %s'

" Use this when using ale
"let g:ale_linters = {
"\   'verilog': ['verible']
"\}

"if !exists('g:ale_verilog_verible_options')
"    let g:ale_verilog_verible_options = ''
"endif
"
"function! ale_linters#verilog#verible#GetCommand(buffer) abort
"    let l:filename = tempname() . '_verible_linted.sv'
"
"    " Create a special filename, so we can detect it in the handler.
"    call ale#command#ManageFile(a:buffer, l:filename)
"    let l:lines = getbufline(a:buffer, 1, '$')
"    call ale#util#Writefile(a:buffer, l:lines, l:filename)
"
"    return 'verible-verilog-lint '
"    \   . ale#Var(a:buffer, 'verilog_verible_options') .' '
"    \   . ale#Escape(l:filename)
"endfunction
"
"function! ale_linters#verilog#verible#Handle(buffer, lines) abort
"    " Look for lines like the following.
"    " Patterns:
"    "   Style warnings
"    "       filename.sv:7:13: Explicitly define static or automatic lifetime for non-class functions [Style: function-task-explicit-lifetime] [explicit-function-lifetime]
"    "   Syntax errors
"    "       filename.v:39:4: syntax error, rejected "endcase" (syntax-error).
"    let l:pattern = '\([A-z0-9_\-\/ ]\+\.v\|[A-z0-9_\-\/ ]\+\.sv\):\(\d\+\):\d\+:\(.*\s\+\)\([Style:.*\|(syntax-error.*\)'
"    let l:output = []
"    for l:match in ale#util#GetMatches(a:lines, l:pattern)
"        let l:file = l:match[1]
"        let l:line = l:match[2]
"        let l:text = l:match[3]
"        let l:type = l:match[4]
"        if l:type =~# '^[Style.*'
"            call add(l:output, {'lnum': l:line,'text': l:text,'type': 'W'})
"        elseif l:type =~# '^(syntax-error.*'
"            call add(l:output, {'lnum': l:line,'text': l:text,'type': 'E'})
"        else
"            call add(l:output, {'lnum': l:line,'text': l:text,'type': 'I'})
"        end
"    endfor
"
"    return l:output
"endfunction
"
"call ale#linter#Define('verilog', {
"\   'name': 'verible',
"\   'output_stream': 'stdout',
"\   'executable': 'verible-verilog-lint',
"\   'command': function('ale_linters#verilog#verible#GetCommand'),
"\   'callback': 'ale_linters#verilog#verible#Handle',
"\   'read_buffer': 0,
"\})


"
" vim-lsp
"
"if executable('verible-verilog-ls')
"    au User lsp_setup call lsp#register_server({
"        \ 'name': 'verible-verilog-ls',
"        \ 'cmd': {server_info->['verible-verilog-ls']},
"        \ 'allowlist': ['verilog', 'systemverilog'],
"        \ })
"endif

"
" verilog-sistemverilog
"
"VerilogErrorFormat verilator 1


" MAPPINGS ---------------------------------------------------------------

" Set space key as the leader key
let mapleader = " "

" Zoom in/out to pane
function! WinZoomToggle() abort
    if ! exists('w:WinZoomIsZoomed')
        let w:WinZoomIsZoomed = 0
    endif
    if w:WinZoomIsZoomed == 0
        let w:WinZoomOldWidth = winwidth(0)
        let w:WinZoomOldHeight = winheight(0)
        wincmd _
        wincmd |
        let w:WinZoomIsZoomed = 1
    elseif w:WinZoomIsZoomed == 1
        execute "resize " . w:WinZoomOldHeight
        execute "vertical resize " . w:WinZoomOldWidth
        let w:WinZoomIsZoomed = 0
    endif
endfunction

nnoremap <leader>wz :call WinZoomToggle()<CR>

" Press \p to print the current file to the default printer from a Linux operating system.
" View available printers:   lpstat -v
" Set default printer:       lpoptions -d <printer_name>
" <silent> means do not display output.
"nnoremap <silent> <leader>p :%w !lp<CR>


" INSERT mode mappings
"
"    -- go to  beginning and end
"    ["<C-b>"] = { "<ESC>^i", "Beginning of line" },
"    ["<C-e>"] = { "<End>", "End of line" },
"
"    -- navigate within insert mode
"    ["<C-h>"] = { "<Left>", "Move left" },
"    ["<C-l>"] = { "<Right>", "Move right" },
"    ["<C-j>"] = { "<Down>", "Move down" },
"    ["<C-k>"] = { "<Up>", "Move up" },

" Type jj to exit insert mode quickly.
inoremap jj <Esc>

" NORMAL mode mappings
"
"    ["<Esc>"] = { ":noh <CR>", "Clear highlights" },

"    -- save
"    ["<C-s>"] = { "<cmd> w <CR>", "Save file" },
"
"    -- Copy all
"    ["<C-c>"] = { "<cmd> %y+ <CR>", "Copy whole file" },
"
"    -- Allow moving the cursor through wrapped lines with j, k, <Up> and <Down>
"    -- http://www.reddit.com/r/vim/comments/2k4cbr/problem_with_gj_and_gk/
"    -- empty mode is same as using <cmd> :map
"    -- also don't use g[j|k] when in operator pending mode, so it doesn't alter d, y or c behaviour
"    ["j"] = { 'v:count || mode(1)[0:1] == "no" ? "j" : "gj"', "Move down", opts = { expr = true } },
"    ["k"] = { 'v:count || mode(1)[0:1] == "no" ? "k" : "gk"', "Move up", opts = { expr = true } },
"    ["<Up>"] = { 'v:count || mode(1)[0:1] == "no" ? "k" : "gk"', "Move up", opts = { expr = true } },
"    ["<Down>"] = { 'v:count || mode(1)[0:1] == "no" ? "j" : "gj"', "Move down", opts = { expr = true } },
"
"    -- new buffer
"    ["<leader>b"] = { "<cmd> enew <CR>", "New buffer" },
"    ["<leader>ch"] = { "<cmd> NvCheatsheet <CR>", "Mapping cheatsheet" },
"
"    ["<leader>fm"] = {
"      function()
"        vim.lsp.buf.format { async = true }
"      end,
"      "LSP formatting",
"    },

" Tabs
" Create a new tab
noremap <leader>t :tabnew<CR>
" Move across tabs
" Default keymaps C-PgDn and C-PgUp may conflict with terminal keymaps also
" used to move across terminal tabs (in Gnome terminal).
" C-I is equal to C-PgDn, 'gt' too.
nnoremap <tab> <c-PageDown><CR>
nnoremap <s-tab> <c-PageUp><CR>

" Move between windows easily
" NITE: Plugin vim-tmux-navigator is installed, which allows moving from vim
" to tmux panes and back with the same keybinds.
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
" These are alternative keybainds to more across Vim-only panes. Enable them
" back if needed.
"noremap <leader><up> :wincmd k<CR>
"noremap <leader><down> :wincmd j<CR>
"noremap <leader><left> :wincmd h<CR>
"noremap <leader><right> :wincmd l<CR>

" Resize split windows using arrow keys by pressing:
" CTRL+UP, CTRL+DOWN, CTRL+LEFT, or CTRL+RIGHT.
noremap <c-up> <c-w>+
noremap <c-down> <c-w>-
noremap <c-left> <c-w>>
noremap <c-right> <c-w><

" Close buffer/tab
nnoremap <leader>x :x<CR>

" fzf related shortcuts
" This needs the fzf plugin and binary. Unlikely to have access to the binary
" on a strict environment, so disabled for now
" FIXME: <C-f> currently clashes with the tmux leader key, which is the same.
" In order for this to work, either change the tmux leader key or press <C-f>
" twice when in tmux. This is not ideal, as it brings a different behavior
" when running vim inside or outside tmux
" NOTE: Consider using <Leader>ff and <Leader>fb to search files and in
" buffers
nnoremap <silent> <C-f> :Files<CR>
nnoremap <silent> <Leader>f :Rg<CR>

" Clear search highlight with c-l
" FIXME: This keybind is used above for moving across panes. Find an
" alternative key. Ideally escape, but it was causing issues when opening
" filess :/
"noremap <silent> <c-l> :nohls<cr><c-l>

" Pressing the letter o will open a new line below the current one.
" Exit insert mode after creating a new line above or below the current line.
nnoremap o o<esc>
nnoremap O O<esc>

" Center the cursor vertically when moving to the next word during a search.
nnoremap n nzz
nnoremap N Nzz

" Yank from cursor to the end of line.
nnoremap Y y$

" Map the F5 key to run a Python script inside Vim.
" I map F5 to a chain of commands here.
" :w saves the file.
" <CR> (carriage return) is like pressing the enter key.
" !clear runs the external clear screen command.
" !python3 % executes the current file with Python.
"nnoremap <f5> :w <CR>:!clear <CR>:!python3 % <CR>


" TERMINAL mode mappings
"
" ["<C-x>"] = { vim.api.nvim_replace_termcodes("<C-\\><C-N>", true, true, true), "Escape terminal mode" },


" VISUAL mode mappings
"

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

" EXECUTE mode mappings
"
"    ["j"] = { 'v:count || mode(1)[0:1] == "no" ? "j" : "gj"', "Move down", opts = { expr = true } },
"    ["k"] = { 'v:count || mode(1)[0:1] == "no" ? "k" : "gk"', "Move up", opts = { expr = true } },
"    -- Don't copy the replaced text after pasting in visual mode
"    -- https://vim.fandom.com/wiki/Replace_a_word_with_yanked_text#Alternative_mapping_for_paste
"    ["p"] = { 'p:let @+=@0<CR>:let @"=@0<CR>', "Dont copy replaced text", opts = { silent = true } },

" Bubble single lines
nnoremap <S-up> :m -2<CR>
nnoremap <S-down> :m +1<CR>

" Bubble multiple lines
vnoremap <S-up> :m '<-2<CR>gv=gv
vnoremap <S-down> :m '>+1<CR>gv=gv

inoremap <S-up> <Esc> :m .-2<CR>==gi
inoremap <S-down> <Esc> :m .+1<CR>==gi

" LSP shortcuts
"nnoremap <leader>d :

" Other mappings

" Open side navigation panel
" TODO: Find a way to toggle it
"       It can be closed with <leader>x, so no need to toggle ;)
nnoremap <leader>e :Vexplore<CR>


" NERDTree Shortcuts
" TODO: Enable these shortcuts after installing the plugin
silent! map <F2> :NERDTreeToggle<CR>
silent! map <F3> :NERDTreeFind<CR>

"" Have nerdtree ignore certain files and directories.
let NERDTreeIgnore=['\.git$', '\.jpg$', '\.mp4$', '\.ogg$', '\.iso$', '\.pdf$', '\.pyc$', '\.odt$', '\.png$', '\.gif$', '\.db$']


" Switch buffers using F4
nnoremap <F4> :buffers<CR>:buffer<Space>

" Refresh vim config with F5
noremap <silent> <F5> :source ~/.vim/vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" Switch buffers using ctrl+left or ctrl+right
"map <C-left> <ESC>:bp<CR>
"map <C-right> <ESC>:bn<CR>

" Set keyboard shortcut for paste toggle.
set pastetoggle=<F9>

" Open a terminal pane below the current pane. The aim is to use Alt+h keybind
" but some terminals will instead send to vim keybind <Esc>h. Use whichever
" mapping works.
"nnoremap <A-h> :term<CR>
nnoremap <Esc>h :term<CR>


" STATUSLINE ----------------------------------------------------------------

" Target status line should provide this information
" default = { "mode", "file", "git", "%=", "lsp_msg", "%=", "diagnostics", "lsp", "cwd", "cursor" },

" Show the status on the second to last line.
set laststatus=2


" Set status line - Place this at the bottom of this file
" NOTE: this is automatically done by plugin lightline.vim, which is also
" automatically loaded by Pathogen
"
" NOTE: plugin vim-mistify-statusline provides with Git, linter status, etc
" that could be interesting to have as part of the statusline. I do like
" better the colorscheme of lightline.vim, so find a way to merge them two
" into 1, new, plugin. Customise colors a bit too, e.g., make the rightmost
" section more readable.
"
let g:lightline = {
      \ 'colorscheme': 'PaperColor_dark',
      \ }

" Use these options below once lightline.vim and vim-mistfly-statusline
" plugins are merged, if ALE is also enabled.

"Plug 'bluz71/vim-mistfly-statusline'

" Use this when using vim-lsp
"if executable('verible-verilog-ls')
"    au User lsp_setup call lsp#register_server({
"        \ 'name': 'verible-verilog-ls',
"        \ 'cmd': {server_info->['verible-verilog-ls']},
"        \ 'allowlist': ['verilog', 'systemverilog'],
"        \ })
"
"endif
"
"function! s:on_lsp_buffer_enabled() abort
"    setlocal omnifunc=lsp#complete
"    setlocal signcolumn=yes
"    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
"    nmap <buffer> gd <plug>(lsp-definition)
"    nmap <buffer> gs <plug>(lsp-document-symbol-search)
"    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
"    nmap <buffer> gr <plug>(lsp-references)
"    nmap <buffer> gi <plug>(lsp-implementation)
"    nmap <buffer> gt <plug>(lsp-type-definition)
"    nmap <buffer> <leader>rn <plug>(lsp-rename)
"    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
"    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
"    nmap <buffer> K <plug>(lsp-hover)
"    nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
"    nnoremap <buffer> <expr><c-d> lsp#scroll(-4)
"
"    let g:lsp_format_sync_timeout = 1000
"    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
"
"    " refer to doc to add more commands
"endfunction
"
"augroup lsp_install
"    au!
"    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
"    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
"augroup END

" Plugins that might be of interest

" Pair autocompletion
"
" call plug#begin()
" Plug 'LunarWatcher/auto-pairs'
" call plug#end()
"
" let g:AutoPairsShortcutToggle = '<C-P>'

" keyword autocompletions
" Plug 'maxboisvert/vim-simple-complete'

" Git integration






" ansible-vim: set indent to 0 after two newlines in insert-mode
let g:ansible_unindent_after_newline = 1

" ansible-vim settings
let g:ansible_attribute_highlight = "od"
let g:ansible_name_highlight = 'b'
let g:ansible_extra_keywords_highlight = 1
let g:ansible_normal_keywords_highlight = 'Constant'
let g:ansible_with_keywords_highlight = 'Constant'

" Fix tmux background color
if &term =~ '256color'
    set t_ut=
endif

" Return to the last edit position when opening files.
augroup vimrcEx
    autocmd!
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal g`\"" |
        \ endif
augroup END

" Ensure cursor is at the top of the file, if editing a git commit message:
au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" Remember info about open buffers on close
set viminfo^=%

" in case you forgot to sudo
cnoremap w!! %!sudo tee > /dev/null %

" Highlight trailing whitespace in red
match ErrorMsg /\s\+\%#\@<!$/

" Jedi stuff
let g:jedi#use_tabs_not_buffers = 0

